package robocorp.robot.intellij;

import com.google.gson.*;
import com.intellij.openapi.components.PersistentStateComponent;
import com.intellij.openapi.components.ServiceManager;
import com.intellij.openapi.components.State;
import com.intellij.openapi.components.Storage;
import com.intellij.openapi.diagnostic.Logger;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;

import java.util.List;
import java.util.concurrent.CopyOnWriteArrayList;


class RobotState {
    
    public String robotLanguageServerPython = "";
    public String robotLanguageServerArgs = "";
    public String robotLanguageServerTcpPort = "";
    public String robotPythonExecutable = "";
    public String robotPythonEnv = "";
    public String robotVariables = "";
    public String robotPythonpath = "";
    public String robotCompletionsSectionHeadersForm = "";
}

// IMPORTANT: Autogenerated. Don't change manually. Run codegen.py to regenerate.
@State(name = "RobotPreferences", storages = {@Storage("RobotPreferences.xml")})
public class RobotPreferences implements PersistentStateComponent<RobotState> {

    
    public static final String ROBOT_LANGUAGE_SERVER_PYTHON = "robot.language-server.python";
    public static final String ROBOT_LANGUAGE_SERVER_ARGS = "robot.language-server.args";
    public static final String ROBOT_LANGUAGE_SERVER_TCP_PORT = "robot.language-server.tcp-port";
    public static final String ROBOT_PYTHON_EXECUTABLE = "robot.python.executable";
    public static final String ROBOT_PYTHON_ENV = "robot.python.env";
    public static final String ROBOT_VARIABLES = "robot.variables";
    public static final String ROBOT_PYTHONPATH = "robot.pythonpath";
    public static final String ROBOT_COMPLETIONS_SECTION_HEADERS_FORM = "robot.completions.section_headers.form";
    
    private static final Logger LOG = Logger.getInstance(RobotPreferences.class);

    // IMPORTANT: Autogenerated. Don't change manually. Run codegen.py to regenerate.
    @Nullable
    @Override
    public RobotState getState() {
        RobotState robotState = new RobotState();
        
        robotState.robotLanguageServerPython = getRobotLanguageServerPython();
        robotState.robotLanguageServerArgs = getRobotLanguageServerArgs();
        robotState.robotLanguageServerTcpPort = getRobotLanguageServerTcpPort();
        robotState.robotPythonExecutable = getRobotPythonExecutable();
        robotState.robotPythonEnv = getRobotPythonEnv();
        robotState.robotVariables = getRobotVariables();
        robotState.robotPythonpath = getRobotPythonpath();
        robotState.robotCompletionsSectionHeadersForm = getRobotCompletionsSectionHeadersForm();
        return robotState;
    }

    // IMPORTANT: Autogenerated. Don't change manually. Run codegen.py to regenerate.
    @Override
    public void loadState(@NotNull RobotState robotState) {
        
        setRobotLanguageServerPython(robotState.robotLanguageServerPython);
        setRobotLanguageServerArgs(robotState.robotLanguageServerArgs);
        setRobotLanguageServerTcpPort(robotState.robotLanguageServerTcpPort);
        setRobotPythonExecutable(robotState.robotPythonExecutable);
        setRobotPythonEnv(robotState.robotPythonEnv);
        setRobotVariables(robotState.robotVariables);
        setRobotPythonpath(robotState.robotPythonpath);
        setRobotCompletionsSectionHeadersForm(robotState.robotCompletionsSectionHeadersForm);
    }
    
    // IMPORTANT: Autogenerated. Don't change manually. Run codegen.py to regenerate.
    public JsonObject asJsonObject() {
        Gson g = new Gson();
        JsonObject jsonObject = new JsonObject();
        
        if(!robotLanguageServerPython.isEmpty()){
            try {
                jsonObject.add(ROBOT_LANGUAGE_SERVER_PYTHON, new JsonPrimitive(robotLanguageServerPython));
            } catch(Exception e) {
                LOG.error(e);
            }
        }
        
        if(!robotLanguageServerArgs.isEmpty()){
            try {
                jsonObject.add(ROBOT_LANGUAGE_SERVER_ARGS, g.fromJson(robotLanguageServerArgs, JsonArray.class));
            } catch(Exception e) {
                LOG.error(e);
            }
        }
        
        if(!robotLanguageServerTcpPort.isEmpty()){
            try {
                jsonObject.add(ROBOT_LANGUAGE_SERVER_TCP_PORT, new JsonPrimitive(Integer.parseInt(robotLanguageServerTcpPort)));
            } catch(Exception e) {
                LOG.error(e);
            }
        }
        
        if(!robotPythonExecutable.isEmpty()){
            try {
                jsonObject.add(ROBOT_PYTHON_EXECUTABLE, new JsonPrimitive(robotPythonExecutable));
            } catch(Exception e) {
                LOG.error(e);
            }
        }
        
        if(!robotPythonEnv.isEmpty()){
            try {
                jsonObject.add(ROBOT_PYTHON_ENV, g.fromJson(robotPythonEnv, JsonObject.class));
            } catch(Exception e) {
                LOG.error(e);
            }
        }
        
        if(!robotVariables.isEmpty()){
            try {
                jsonObject.add(ROBOT_VARIABLES, g.fromJson(robotVariables, JsonObject.class));
            } catch(Exception e) {
                LOG.error(e);
            }
        }
        
        if(!robotPythonpath.isEmpty()){
            try {
                jsonObject.add(ROBOT_PYTHONPATH, g.fromJson(robotPythonpath, JsonArray.class));
            } catch(Exception e) {
                LOG.error(e);
            }
        }
        
        if(!robotCompletionsSectionHeadersForm.isEmpty()){
            try {
                jsonObject.add(ROBOT_COMPLETIONS_SECTION_HEADERS_FORM, new JsonPrimitive(robotCompletionsSectionHeadersForm));
            } catch(Exception e) {
                LOG.error(e);
            }
        }
        
        return jsonObject;
    }

    
    private String robotLanguageServerPython = "";

    public String getRobotLanguageServerPython() {
        return robotLanguageServerPython;
    }

    public void setRobotLanguageServerPython(String s) {
        if (s == null) {
            s = "";
        }
        if (s.equals(robotLanguageServerPython)) {
            return;
        }
        String old = robotLanguageServerPython;
        robotLanguageServerPython = s;
        for (IRobotPreferencesListener listener : listeners) {
            listener.onChanged(ROBOT_LANGUAGE_SERVER_PYTHON, old, s);
        }
    }
    
    private String robotLanguageServerArgs = "";

    public String getRobotLanguageServerArgs() {
        return robotLanguageServerArgs;
    }

    public void setRobotLanguageServerArgs(String s) {
        if (s == null) {
            s = "";
        }
        if (s.equals(robotLanguageServerArgs)) {
            return;
        }
        String old = robotLanguageServerArgs;
        robotLanguageServerArgs = s;
        for (IRobotPreferencesListener listener : listeners) {
            listener.onChanged(ROBOT_LANGUAGE_SERVER_ARGS, old, s);
        }
    }
    
    private String robotLanguageServerTcpPort = "";

    public String getRobotLanguageServerTcpPort() {
        return robotLanguageServerTcpPort;
    }

    public void setRobotLanguageServerTcpPort(String s) {
        if (s == null) {
            s = "";
        }
        if (s.equals(robotLanguageServerTcpPort)) {
            return;
        }
        String old = robotLanguageServerTcpPort;
        robotLanguageServerTcpPort = s;
        for (IRobotPreferencesListener listener : listeners) {
            listener.onChanged(ROBOT_LANGUAGE_SERVER_TCP_PORT, old, s);
        }
    }
    
    private String robotPythonExecutable = "";

    public String getRobotPythonExecutable() {
        return robotPythonExecutable;
    }

    public void setRobotPythonExecutable(String s) {
        if (s == null) {
            s = "";
        }
        if (s.equals(robotPythonExecutable)) {
            return;
        }
        String old = robotPythonExecutable;
        robotPythonExecutable = s;
        for (IRobotPreferencesListener listener : listeners) {
            listener.onChanged(ROBOT_PYTHON_EXECUTABLE, old, s);
        }
    }
    
    private String robotPythonEnv = "";

    public String getRobotPythonEnv() {
        return robotPythonEnv;
    }

    public void setRobotPythonEnv(String s) {
        if (s == null) {
            s = "";
        }
        if (s.equals(robotPythonEnv)) {
            return;
        }
        String old = robotPythonEnv;
        robotPythonEnv = s;
        for (IRobotPreferencesListener listener : listeners) {
            listener.onChanged(ROBOT_PYTHON_ENV, old, s);
        }
    }
    
    private String robotVariables = "";

    public String getRobotVariables() {
        return robotVariables;
    }

    public void setRobotVariables(String s) {
        if (s == null) {
            s = "";
        }
        if (s.equals(robotVariables)) {
            return;
        }
        String old = robotVariables;
        robotVariables = s;
        for (IRobotPreferencesListener listener : listeners) {
            listener.onChanged(ROBOT_VARIABLES, old, s);
        }
    }
    
    private String robotPythonpath = "";

    public String getRobotPythonpath() {
        return robotPythonpath;
    }

    public void setRobotPythonpath(String s) {
        if (s == null) {
            s = "";
        }
        if (s.equals(robotPythonpath)) {
            return;
        }
        String old = robotPythonpath;
        robotPythonpath = s;
        for (IRobotPreferencesListener listener : listeners) {
            listener.onChanged(ROBOT_PYTHONPATH, old, s);
        }
    }
    
    private String robotCompletionsSectionHeadersForm = "";

    public String getRobotCompletionsSectionHeadersForm() {
        return robotCompletionsSectionHeadersForm;
    }

    public void setRobotCompletionsSectionHeadersForm(String s) {
        if (s == null) {
            s = "";
        }
        if (s.equals(robotCompletionsSectionHeadersForm)) {
            return;
        }
        String old = robotCompletionsSectionHeadersForm;
        robotCompletionsSectionHeadersForm = s;
        for (IRobotPreferencesListener listener : listeners) {
            listener.onChanged(ROBOT_COMPLETIONS_SECTION_HEADERS_FORM, old, s);
        }
    }
    

    interface IRobotPreferencesListener {
        void onChanged(String property, String oldValue, String newValue);
    }

    private List<IRobotPreferencesListener> listeners = new CopyOnWriteArrayList<>();

    public static RobotPreferences getInstance() {
        return ServiceManager.getService(RobotPreferences.class);
    }

    public void addListener(IRobotPreferencesListener listener) {
        listeners.add(listener);
    }
}